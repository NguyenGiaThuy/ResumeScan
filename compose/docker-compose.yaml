services:
  # ----------------------------------
  # Open-Source Software (OSS)
  postgres:
    container_name: postgres
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password.txt
      - PGDATA=/data/postgres
      - POSTGRES_DB=appdb
    secrets:
      - postgres_user.txt
      - postgres_password.txt
    volumes:
      - postgres-data:/data/postgres
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres-init:
    container_name: postgres-init
    image: postgres:15
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password.txt
      - POSTGRES_DB=appdb
      - LANGGRAPH_DB=langgraph_db
    secrets:
      - postgres_user.txt
      - postgres_password.txt
    volumes:
      - ./postgres-init:/scripts
    command: >
      bash -c "
        until pg_isready -h postgres -p 5432 -U postgres; do
          echo 'Waiting for postgres...'
          sleep 2
        done
        echo 'PostgreSQL is ready - creating databases'
        PGPASSWORD=$$(cat /run/secrets/postgres_password.txt) createdb -h postgres -U postgres langgraph_db || echo 'langgraph_db already exists'
        echo 'Database initialization completed'
      "
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:0.111.0
    volumes:
      - ${PWD}/otel-collector/config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - 8889:8889
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8889/metrics"]
      interval: 30s
      timeout: 10s
      retries: 5

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:3
    ports:
      - 9411:9411
    depends_on:
      - otel-collector
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  chroma:
    container_name: chroma
    image: chromadb/chroma:1.0.16.dev100
    environment:
      - CHROMA_OPEN_TELEMETRY__ENDPOINT=http://otel-collector:4317/
      - CHROMA_OPEN_TELEMETRY__SERVICE_NAME=chroma
    volumes:
      - chroma-data:/data
    ports:
      - 8000:8000
    restart: unless-stopped
    depends_on:
      - otel-collector
      - zipkin
    healthcheck:
      test:
        ["CMD", "wget", "--spider", "http://localhost:8000/api/v2/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 5

  adminer:
    container_name: adminer
    image: adminer:5
    ports:
      - 8080:8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    container_name: redis
    image: redis:7
    ports:
      - 6379:6379
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    container_name: minio
    image: minio/minio:RELEASE.2024-06-29T01-20-47Z
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_CONSOLE_ADDRESS=:9001
    volumes:
      - minio-data:/data
    ports:
      - 9000:9000
      - 9001:9001
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.45.0
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - 9090:9090
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 5

  grafana:
    container_name: grafana
    image: grafana/grafana:9.5.2
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - 3000:3000
    restart: unless-stopped
    depends_on:
      - loki
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  loki:
    container_name: loki
    image: grafana/loki:3.0.0
    volumes:
      - ./loki/loki-config.yaml:/mnt/config/loki-config.yaml
      - ./data:/tmp
    command: 
      - -config.file=/mnt/config/loki-config.yaml
    ports:
      - 3100:3100
    restart: unless-stopped

  promtail:
    container_name: promtail
    image: grafana/promtail:3.0.0
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./promtail/promtail-config.yaml:/mnt/config/promtail-config.yaml
    command: 
      - -config.file=/mnt/config/promtail-config.yaml
      - -config.expand-env=true
    restart: unless-stopped
    depends_on:
      - loki

  # ----------------------------------
  # Apps
  chatbox:
    container_name: chatbox
    build: ../apps/chatbox
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - CONFIG_FILE=configs/ai-elevate-dev.json
      - MATCHING_SERVICE_URL=http://matching:8001
    ports:
      - 8501:8501
    restart: unless-stopped
    depends_on:
      - matching

  matching:
    container_name: matching
    build: ../apps/matching
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - CONFIG_FILE=configs/ai-elevate-dev.json
      - PORT=8001
    labels:
      - "logging.jobname=matching"
    ports:
      - 8001:8001
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 60s
      timeout: 10s
      retries: 5

  graph:
    container_name: graph
    build: ../apps/graph
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=langgraph_db
      - SECRET_USER_FILE=/run/secrets/postgres_user.txt
      - SECRET_PASSWORD_FILE=/run/secrets/postgres_password.txt
      - PORT=8004
    labels:
      - "logging.jobname=graph"
    secrets:
      - postgres_user.txt
      - postgres_password.txt
    ports:
      - 8004:8004
    restart: unless-stopped
    depends_on:
      - postgres-init
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 60s
      timeout: 10s
      retries: 5

  db-integration:
    container_name: db-integration
    build: ../apps/db_integration
    environment:
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=langgraph_db
      - SECRET_USER_FILE=/run/secrets/postgres_user.txt
      - SECRET_PASSWORD_FILE=/run/secrets/postgres_password.txt
      - CONFIG_FILE=configs/ai-elevate-dev.json
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - PORT=8003
    labels:
      - "logging.jobname=db-integration"
    secrets:
      - postgres_user.txt
      - postgres_password.txt
    ports:
      - 8003:8003
    restart: unless-stopped
    depends_on:
      - postgres-init
      - chroma
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 60s
      timeout: 10s
      retries: 5

# ------------------------------------------------------------------------------
volumes:
  postgres-data:
  chroma-data:
  prometheus-data:
  grafana-data:
  minio-data:

secrets:
  postgres_user.txt:
    file: ./test-secrets/postgres_user.txt
  postgres_password.txt:
    file: ./test-secrets/postgres_password.txt
